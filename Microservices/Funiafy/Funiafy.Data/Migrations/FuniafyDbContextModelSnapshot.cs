// <auto-generated />
using Funiafy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Funiafy.Data.Migrations
{
    [DbContext(typeof(FuniafyDbContext))]
    partial class FuniafyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Funiafy.Domain.Artist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Funiafy.Domain.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Funiafy.Domain.Song", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cover")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<uint>("Duration")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("Explicit")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("GenreId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Funiafy.Domain.SongCollections.SongCollection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cover")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<ulong>("Duration")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("Private")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.ToTable("SongCollections", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("SongCollection");
                });

            modelBuilder.Entity("Funiafy.Domain.SongJoinEntities.AlbumSong", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("SongId");

                    b.ToTable("AlbumSongs");
                });

            modelBuilder.Entity("Funiafy.Domain.SongJoinEntities.ArtistSong", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ArtistId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("ArtistSongs");
                });

            modelBuilder.Entity("Funiafy.Domain.SongJoinEntities.PlaylistSong", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("Funiafy.Domain.UserJoinEntities.UserAlbum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("Funiafy.Domain.UserJoinEntities.UserArtist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ArtistId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("UserArtists");
                });

            modelBuilder.Entity("Funiafy.Domain.UserJoinEntities.UserPlaylist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("UserPlaylists");
                });

            modelBuilder.Entity("Funiafy.Domain.UserJoinEntities.UserSong", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("UserSongs");
                });

            modelBuilder.Entity("Funiafy.Domain.SongCollections.Album", b =>
                {
                    b.HasBaseType("Funiafy.Domain.SongCollections.SongCollection");

                    b.Property<string>("ArtistId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GenreId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.HasDiscriminator().HasValue("Album");
                });

            modelBuilder.Entity("Funiafy.Domain.SongCollections.Playlist", b =>
                {
                    b.HasBaseType("Funiafy.Domain.SongCollections.SongCollection");

                    b.HasDiscriminator().HasValue("Playlist");
                });

            modelBuilder.Entity("Funiafy.Domain.SongCollections.Ep", b =>
                {
                    b.HasBaseType("Funiafy.Domain.SongCollections.Album");

                    b.HasDiscriminator().HasValue("Ep");
                });

            modelBuilder.Entity("Funiafy.Domain.Song", b =>
                {
                    b.HasOne("Funiafy.Domain.Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Funiafy.Domain.SongJoinEntities.AlbumSong", b =>
                {
                    b.HasOne("Funiafy.Domain.SongCollections.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Funiafy.Domain.Song", "Song")
                        .WithMany("Albums")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Funiafy.Domain.SongJoinEntities.ArtistSong", b =>
                {
                    b.HasOne("Funiafy.Domain.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Funiafy.Domain.Song", "Song")
                        .WithMany("Artists")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Funiafy.Domain.SongJoinEntities.PlaylistSong", b =>
                {
                    b.HasOne("Funiafy.Domain.SongCollections.Playlist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Funiafy.Domain.Song", "Song")
                        .WithMany("Playlists")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Funiafy.Domain.UserJoinEntities.UserAlbum", b =>
                {
                    b.HasOne("Funiafy.Domain.SongCollections.Album", "Album")
                        .WithMany("Users")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Funiafy.Domain.UserJoinEntities.UserArtist", b =>
                {
                    b.HasOne("Funiafy.Domain.Artist", "Artist")
                        .WithMany("Users")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Funiafy.Domain.UserJoinEntities.UserPlaylist", b =>
                {
                    b.HasOne("Funiafy.Domain.SongCollections.Playlist", "Playlist")
                        .WithMany("Users")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Funiafy.Domain.UserJoinEntities.UserSong", b =>
                {
                    b.HasOne("Funiafy.Domain.Song", "Song")
                        .WithMany("Users")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Funiafy.Domain.SongCollections.Album", b =>
                {
                    b.HasOne("Funiafy.Domain.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Funiafy.Domain.Genre", "Genre")
                        .WithMany("Albums")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Funiafy.Domain.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Songs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Funiafy.Domain.Genre", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Funiafy.Domain.Song", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Artists");

                    b.Navigation("Playlists");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Funiafy.Domain.SongCollections.Album", b =>
                {
                    b.Navigation("Songs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Funiafy.Domain.SongCollections.Playlist", b =>
                {
                    b.Navigation("Songs");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
